//Copyright (c) 2014 Eric Vallee <eric_vallee2003@yahoo.ca>
//MIT License: https://raw.githubusercontent.com/Magnitus-/ExpressSessionMongoDB/master/License.txt

var MongoDB = require('mongodb');
var Store = require('../lib/ExpressSessionMongoDB');
var Nimble = require('nimble');

var Context = {};
var RandomIdentifier = 'ExpressSessionMongoDBTestDB'+Math.random().toString(36).slice(-8);

exports.EnsureDependencies = {
    'setUp': function(Callback) {
        MongoDB.MongoClient.connect("mongodb://localhost:27017/"+RandomIdentifier, {native_parser:true}, function(Err, DB) {
            if(Err)
            {
                console.log(Err);
            }
            Context['DB'] = DB;
            Context['CollectionName'] = 'Sessions';
            Callback();
        });
    },
    'tearDown': function(Callback) {
        Context.DB.dropDatabase(function(Err, Result) {
            if(Err)
            {
                console.log(Err);
            }
            Context.DB.close();
            Context['DB'] = null;
            Callback();
        });
    },
    'TestEnsureTimeToLive': function(Test) {
        Test.expect(3);
        Context['DB'].createCollection(Context['CollectionName'], function(Err, SessionCollection) {
            Context['TimeToLive'] = 0;
            Store.prototype.UnitTestCalls['EnsureTimeToLive'].call(Context, SessionCollection, function(Err) {
                SessionCollection.indexInformation({full:true}, function(err, IndexInformation) {
                    Test.ok(IndexInformation.length==1, "Confirming that no index is created when TimeToLive is 0.");
                    Context['TimeToLive'] = 100;
                    Store.prototype.UnitTestCalls['EnsureTimeToLive'].call(Context, SessionCollection, function(Err) {
                        SessionCollection.indexInformation({full:true}, function(err, IndexInformation) {
                            Test.ok(IndexInformation.length==2 && IndexInformation[1]['key']['LastAccessed']==1, "Confirming that an index is created when TimeToLive is greater than 0.");
                            Store.prototype.UnitTestCalls['EnsureTimeToLive'].call(Context, SessionCollection, function(Err) {
                                SessionCollection.indexInformation({full:true}, function(err, IndexInformation) {
                                    Test.ok(IndexInformation.length==2 && IndexInformation[1]['key']['LastAccessed']==1, "Confirming that calling the method multiple times when index is already set is harmless.");
                                    Test.done();
                                });
                            });
                        });
                    });
                });
            });
        });
    },
    'EnsureIndexSessionID': function(Test) {
        Test.expect(3);
        Context['DB'].createCollection(Context['CollectionName'], function(Err, SessionCollection) {
            Context['IndexSessionID'] = false;
            Store.prototype.UnitTestCalls['EnsureIndexSessionID'].call(Context, SessionCollection, function(Err) {
                SessionCollection.indexInformation({full:true}, function(err, IndexInformation) {
                    Test.ok(IndexInformation.length==1, "Confirming that no index is created when IndexSessionID is falsey.");
                    Context['IndexSessionID'] = true;
                    Store.prototype.UnitTestCalls['EnsureIndexSessionID'].call(Context, SessionCollection, function(Err) {
                        SessionCollection.indexInformation({full:true}, function(err, IndexInformation) {
                            Test.ok(IndexInformation.length==2 && IndexInformation[1]['key']['SessionID']==1, "Confirming that an index is created when IndexSessionID is truey.");
                            Store.prototype.UnitTestCalls['EnsureIndexSessionID'].call(Context, SessionCollection, function(Err) {
                                SessionCollection.indexInformation({full:true}, function(err, IndexInformation) {
                                    Test.ok(IndexInformation.length==2 && IndexInformation[1]['key']['SessionID']==1, "Confirming that calling the method multiple times when index is already set is harmless.");
                                    Test.done();
                                });
                            });
                        });
                    });
                });
            });
        });
    },
    'TestEnsureDependencies': function(Test) {
        Test.expect(0);
        function ConfirmCollectionState(Indexes, Callback)
        {
            Store.prototype.UnitTestCalls['EnsureDependencies'].call(Context, function(Err) {
                Context['DB'].listCollections(function(Err, Collections) {
                    console.log(Collections[0]);
                    Test.ok(Collections.length==1, "Confirming that the collection was properly created");
                    Context['DB'].collection(Context['CollectionName'], function(Err, SessionCollection) {
                        SessionCollection.indexInformation({full:true}, function(err, IndexInformation) {
                            var IndexList = IndexInformation.map(function(Item, Index, Array){
                                for (Key in Item['key'])
                                {
                                    return Key;
                                }
                            });
                        });
                        var Tests = Indexes.map//Continue here
                    });
                });
            });
        }
        Nimble.series([
            function(Callback) {
                Context['TimeToLive'] = 0;
                Context['IndexSessionID'] = false;
            },
            function(Callback) {
                EnsurePath('/test', '/test', Callback);
            },
            function(Callback) {
                EnsurePath('/test/1', '/test/:id', Callback);
            },
            function(Callback) {
                EnsurePath('/InnerApp/1', '/InnerApp/:Innerid', Callback);
            },
            function(Callback) {
                EnsurePath('/InnerApp/1/test', '/InnerApp/:Innerid/test', Callback);
            },
            function(Callback) {
                EnsurePath('/InnerApp/1/test/1', '/InnerApp/:Innerid/test/:id', Callback);
            },
            function(Callback) {
                EnsurePath('/InnerAppRouter', '/InnerAppRouter', Callback);
            },
            function(Callback) {
                EnsurePath('/InnerAppRouter/test', '/InnerAppRouter/test', Callback);
            },
            function(Callback) {
                EnsurePath('/InnerAppRouter/test/1', '/InnerAppRouter/test/:id', Callback);
            },  
            function(Callback) {
                EnsurePath('/Use', '/Use', Callback);
            }], 
            function(Err) {
                Test.done();
            });
        Test.done();
    }
};

exports.ErrorHandling = {
};

process.on('uncaughtException', function(MainErr) {
    if(Context.DB)
    {
        Context.DB.dropDatabase(function(Err, Result) {
            if(Err)
            {
                console.log(Err);
            }
            console.log('Caught exception: ' + MainErr);
            process.exit(1);
        });
    }
    else
    {
        console.log('Caught exception: ' + MainErr);
        process.exit(1);
    }
});
