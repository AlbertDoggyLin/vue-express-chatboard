var gdjs;(function(r){class y extends r.RuntimeBehavior{constructor(e,t,o){super(e,t,o);this._angle=0;this._x=0;this._y=0;this._xVelocity=0;this._yVelocity=0;this._angularSpeed=0;this._leftKey=!1;this._rightKey=!1;this._upKey=!1;this._downKey=!1;this._leftKeyPressedDuration=-1;this._rightKeyPressedDuration=-1;this._upKeyPressedDuration=-1;this._downKeyPressedDuration=-1;this._stickAngle=0;this._stickForce=0;this._temporaryPointForTransformations=[0,0];this._allowDiagonals=t.allowDiagonals,this._acceleration=t.acceleration,this._deceleration=t.deceleration,this._maxSpeed=t.maxSpeed,this._angularMaxSpeed=t.angularMaxSpeed,this._rotateObject=t.rotateObject,this._angleOffset=t.angleOffset,this._ignoreDefaultControls=t.ignoreDefaultControls,this.setViewpoint(t.viewpoint,t.customIsometryAngle),this._movementAngleOffset=t.movementAngleOffset||0}updateFromBehaviorData(e,t){return e.allowDiagonals!==t.allowDiagonals&&(this._allowDiagonals=t.allowDiagonals),e.acceleration!==t.acceleration&&(this._acceleration=t.acceleration),e.deceleration!==t.deceleration&&(this._deceleration=t.deceleration),e.maxSpeed!==t.maxSpeed&&(this._maxSpeed=t.maxSpeed),e.angularMaxSpeed!==t.angularMaxSpeed&&(this._angularMaxSpeed=t.angularMaxSpeed),e.rotateObject!==t.rotateObject&&(this._rotateObject=t.rotateObject),e.angleOffset!==t.angleOffset&&(this._angleOffset=t.angleOffset),e.ignoreDefaultControls!==t.ignoreDefaultControls&&(this._ignoreDefaultControls=t.ignoreDefaultControls),(e.platformType!==t.platformType||e.customIsometryAngle!==t.customIsometryAngle)&&this.setViewpoint(t.platformType,t.customIsometryAngle),e.movementAngleOffset!==t.movementAngleOffset&&(this._movementAngleOffset=t.movementAngleOffset),!0}setViewpoint(e,t){e==="PixelIsometry"?this._basisTransformation=new r.TopDownMovementRuntimeBehavior.IsometryTransformation(Math.atan(.5)):e==="TrueIsometry"?this._basisTransformation=new r.TopDownMovementRuntimeBehavior.IsometryTransformation(Math.PI/6):e==="CustomIsometry"?this._basisTransformation=new r.TopDownMovementRuntimeBehavior.IsometryTransformation(t*Math.PI/180):this._basisTransformation=null}setAcceleration(e){this._acceleration=e}getAcceleration(){return this._acceleration}setDeceleration(e){this._deceleration=e}getDeceleration(){return this._deceleration}setMaxSpeed(e){this._maxSpeed=e}getMaxSpeed(){return this._maxSpeed}setAngularMaxSpeed(e){this._angularMaxSpeed=e}getAngularMaxSpeed(){return this._angularMaxSpeed}setAngleOffset(e){this._angleOffset=e}getAngleOffset(){return this._angleOffset}allowDiagonals(e){this._allowDiagonals=e}diagonalsAllowed(){return this._allowDiagonals}setRotateObject(e){this._rotateObject=e}isObjectRotated(){return this._rotateObject}isMoving(){return this._xVelocity!==0||this._yVelocity!==0}getSpeed(){return Math.sqrt(this._xVelocity*this._xVelocity+this._yVelocity*this._yVelocity)}getXVelocity(){return this._xVelocity}getYVelocity(){return this._yVelocity}getAngle(){return this._angle}setMovementAngleOffset(e){this._movementAngleOffset=e}getMovementAngleOffset(){return this._movementAngleOffset}doStepPreEvents(e){const t=37,o=38,_=39,h=40;this._leftKey|=!this._ignoreDefaultControls&&e.getGame().getInputManager().isKeyPressed(t),this._rightKey|=!this._ignoreDefaultControls&&e.getGame().getInputManager().isKeyPressed(_),this._downKey|=!this._ignoreDefaultControls&&e.getGame().getInputManager().isKeyPressed(h),this._upKey|=!this._ignoreDefaultControls&&e.getGame().getInputManager().isKeyPressed(o);let s=-1;if(this._allowDiagonals)this._upKey&&!this._downKey?this._leftKey&&!this._rightKey?s=5:!this._leftKey&&this._rightKey?s=7:s=6:!this._upKey&&this._downKey?this._leftKey&&!this._rightKey?s=3:!this._leftKey&&this._rightKey?s=1:s=2:this._leftKey&&!this._rightKey?s=4:!this._leftKey&&this._rightKey&&(s=0);else{const i=this.owner.getElapsedTime(e);this._leftKey?this._leftKeyPressedDuration+=i:this._leftKeyPressedDuration=0,this._rightKey?this._rightKeyPressedDuration+=i:this._rightKeyPressedDuration=0,this._downKey?this._downKeyPressedDuration+=i:this._downKeyPressedDuration=0,this._upKey?this._upKeyPressedDuration+=i:this._upKeyPressedDuration=0,this._upKey&&!this._downKey?s=6:!this._upKey&&this._downKey&&(s=2),this._leftKey&&!this._rightKey&&(this._upKey===this._downKey||this._upKey&&this._leftKeyPressedDuration<this._upKeyPressedDuration||this._downKey&&this._leftKeyPressedDuration<this._downKeyPressedDuration)?s=4:this._rightKey&&!this._leftKey&&(this._upKey===this._downKey||this._upKey&&this._rightKeyPressedDuration<this._upKeyPressedDuration||this._downKey&&this._rightKeyPressedDuration<this._downKeyPressedDuration)&&(s=0)}const n=this.owner,a=this.owner.getElapsedTime(e)/1e3;let l=0,f=0;const p=this._xVelocity,m=this._yVelocity;if(s!==-1)l=(s+this._movementAngleOffset/45)*Math.PI/4,f=s*45+this._movementAngleOffset,this._xVelocity+=this._acceleration*a*Math.cos(l),this._yVelocity+=this._acceleration*a*Math.sin(l);else if(this._stickForce!==0){this._allowDiagonals||(this._stickAngle=90*Math.floor((this._stickAngle+45)/90)),f=this._stickAngle+this._movementAngleOffset,l=f*Math.PI/180;const i=this._acceleration*a*this._stickForce;this._xVelocity+=i*Math.cos(l),this._yVelocity+=i*Math.sin(l),this._stickForce=0}else if(this._yVelocity!==0||this._xVelocity!==0){l=Math.atan2(this._yVelocity,this._xVelocity),f=l*180/Math.PI;const i=this._xVelocity>=0,d=this._yVelocity>=0;this._xVelocity-=this._deceleration*a*Math.cos(l),this._yVelocity-=this._deceleration*a*Math.sin(l),this._xVelocity>0!==i&&(this._xVelocity=0),this._yVelocity>0!==d&&(this._yVelocity=0)}this._xVelocity*this._xVelocity+this._yVelocity*this._yVelocity>this._maxSpeed*this._maxSpeed&&(this._xVelocity=this._maxSpeed*Math.cos(l),this._yVelocity=this._maxSpeed*Math.sin(l)),this._angularSpeed=this._angularMaxSpeed;const c=(p+this._xVelocity)/2*a,g=(m+this._yVelocity)/2*a;if(this._basisTransformation===null)n.setX(n.getX()+c),n.setY(n.getY()+g);else{const i=this._temporaryPointForTransformations;i[0]=c,i[1]=g,this._basisTransformation.toScreen(i,i),n.setX(n.getX()+i[0]),n.setY(n.getY()+i[1])}(this._xVelocity!==0||this._yVelocity!==0)&&(this._angle=f,this._rotateObject&&n.rotateTowardAngle(f+this._angleOffset,this._angularSpeed,e)),this._leftKey=!1,this._rightKey=!1,this._upKey=!1,this._downKey=!1}simulateControl(e){e==="Left"?this._leftKey=!0:e==="Right"?this._rightKey=!0:e==="Up"?this._upKey=!0:e==="Down"&&(this._downKey=!0)}ignoreDefaultControls(e){this._ignoreDefaultControls=e}simulateLeftKey(){this._leftKey=!0}simulateRightKey(){this._rightKey=!0}simulateUpKey(){this._upKey=!0}simulateDownKey(){this._downKey=!0}simulateStick(e,t){this._stickAngle=e%360,this._stickForce=Math.max(0,Math.min(1,t))}}r.TopDownMovementRuntimeBehavior=y,function(e){class u{constructor(o){if(o<=0||o>=Math.PI/4)throw new RangeError("An isometry angle must be in ]0; pi/4] but was: "+o);const _=Math.asin(Math.tan(o)),h=Math.sin(_),s=Math.cos(Math.PI/4),n=s;this._screen=[[s,-n],[h*n,h*s]]}toScreen(o,_){const h=this._screen[0][0]*o[0]+this._screen[0][1]*o[1],s=this._screen[1][0]*o[0]+this._screen[1][1]*o[1];_[0]=h,_[1]=s}}e.IsometryTransformation=u}(y=r.TopDownMovementRuntimeBehavior||(r.TopDownMovementRuntimeBehavior={})),r.registerBehavior("TopDownMovementBehavior::TopDownMovementBehavior",r.TopDownMovementRuntimeBehavior)})(gdjs||(gdjs={}));
//# sourceMappingURL=topdownmovementruntimebehavior.js.map
